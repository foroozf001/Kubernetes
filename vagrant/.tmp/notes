6. Install Nginx ingress controller ([source](https://kubernetes.github.io/ingress-nginx/deploy/#bare-metal)).
```bash
vagrant@k8s-master:~$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.4/deploy/static/provider/baremetal/deploy.yaml
namespace/ingress-nginx created
serviceaccount/ingress-nginx created
configmap/ingress-nginx-controller created
clusterrole.rbac.authorization.k8s.io/ingress-nginx created
clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created
role.rbac.authorization.k8s.io/ingress-nginx created
rolebinding.rbac.authorization.k8s.io/ingress-nginx created
service/ingress-nginx-controller-admission created
service/ingress-nginx-controller created
deployment.apps/ingress-nginx-controller created
ingressclass.networking.k8s.io/nginx created
validatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created
serviceaccount/ingress-nginx-admission created
clusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created
clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created
role.rbac.authorization.k8s.io/ingress-nginx-admission created
rolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created
job.batch/ingress-nginx-admission-create created
job.batch/ingress-nginx-admission-patch created
```
7. Create ```ingress.yaml```.
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-web
  annotations:
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: example.internal.vodafoneziggo.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx
            port:
              number: 80
```
8. Deploy Ingress.
```bash
vagrant@k8s-master:~$ kubectl apply -f ingress.yaml
ingress.networking.k8s.io/ingress-web created
```
9. Inspect Ingress has external IP.
```bash
vagrant@k8s-master:~$ kubectl get ingress
NAME          CLASS    HOSTS                                ADDRESS         PORTS   AGE
ingress-web   <none>   example.internal.vodafoneziggo.com   192.168.50.12   80      25s
```
##
6. Create ```ingress-argocd.yaml```.
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-argocd
  namespace: argocd
  annotations:
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
spec:
  rules:
  - host: argocd.internal.vodafoneziggo.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: argocd-server
            port:
              number: 443
```
7. Deploy ```ingress-argocd.yaml```.
```bash
vagrant@k8s-master:~$ kubectl apply -f ingress-argocd.yaml 
ingress.networking.k8s.io/ingress-argocd created
```
8. Inspect Ingress has external IP.
```bash
vagrant@k8s-master:~$ kubectl get ingress -n argocd
NAME             CLASS    HOSTS                               ADDRESS         PORTS   AGE
ingress-argocd   <none>   argocd.internal.vodafoneziggo.com   192.168.50.12   80      15s
```